=head1 NAME

Apache::Registry - Run unaltered CGI scrips under mod_perl

=head1 Synopsis

  #in httpd.conf
  
  Alias /perl/ /perl/apache/scripts/ #optional
  PerlModule Apache::Registry
  
  <Location /perl>
    SetHandler perl-script
    PerlHandler Apache::Registry
    Options ExecCGI
  </Location>

=head1 Description

C<Apache::Registry> is the Apache module allowing you to run CGI
scripts very fast under mod_perl, by compiling all scripts once and
then caching them in memory.

URIs in the form of I<http://www.example.com/perl/file.pl> will be
compiled as the body of a perl subroutine and executed.  Each server
process or 'child' will compile the subroutine once and store it in
memory. It will recompile it whenever the file is updated on disk.
Think of it as an object oriented server with each script implementing
a class loaded at runtime.

The file looks much like a "normal" script, but it is compiled or 'evaled'
into a subroutine.

Here's an example:

  my $r = Apache->request;
  $r->content_type("text/html");
  $r->send_http_header;
  $r->print("Hi There!");

This module emulates the CGI environment, allowing programmers to
write scripts that run under CGI or mod_perl without change.  Existing
CGI scripts may require some changes, simply because a CGI script has
a very short lifetime of one HTTP request, allowing you to get away
with "quick and dirty" scripting.  Using mod_perl and Apache::Registry
requires you to be more careful, but it also gives new meaning to the
word "quick"!

Be sure to read all mod_perl related documentation for more details,
including instructions for setting up an environment that looks
exactly like CGI:

  print "Content-type: text/html\n\n";
  print "Hi There!";

Note that each httpd process or "child" must compile each script once,
so the first request to one server may seem slow, but each request
there after will be faster.  If your scripts are large and/or make use
of many Perl modules, this difference should be noticeable to the
human eye.

=head1 Security

C<Apache::Registry::handler> will preform the same checks as
C<mod_cgi> before running the script.

=head1 Environment

The Apache function C<exit> overrides the Perl core built-in function.

The environment variable C<GATEWAY_INTERFACE> is set to
C<CGI-Perl/1.1>.

=head1 Command Line Switches on the First Line

Normally when a Perl script is run from the command line or under CGI,
arguments on the C<#!> line are passed to the perl interpreter for
processing.

C<Apache::Registry> currently only honors the C<-w> switch and will
turn on warnings using the C<$^W> global variable.  Another common
switch used with CGI scripts is C<-T> to turn on taint checking.  This
can only be enabled when the server starts with the configuration
directive:

  PerlTaintCheck On

However, if taint checking is not enabled, but the C<-T> switch is
seen, C<Apache::Registry> will write a warning to the I<error_log>.

=head1 Debugging

You may set the debug level with the C<$Apache::Registry::Debug> bitmask

  1 => log recompile in errorlog
  2 => Apache::Debug::dump in case of $@
  4 => trace pedantically

=head1 Caveats

C<Apache::Registry> makes things look just the CGI environment,
however, you must understand that this B<is not CGI>.  Each httpd
child will compile your script into memory and keep it there, whereas
CGI will run it once, cleaning out the entire process space.  Many
times you have heard "always use C<-w>, always use C<-w> and C<use
strict>".  This is more important here than anywhere else!

Your scripts cannot contain the C<__END__> or C<__DATA__> token to terminate
compilation.

=head1 See Also

perl, mod_perl, L<Apache>, L<Apache::Debug>

=head1 Maintainers

Maintainer is the person(s) you should contact with updates,
corrections and patches.

=over

=item * The L<documentation mailing list|maillist::docs-dev>

=back

=head1 Authors

=over

=item * Andreas J. Koenig

=item * Doug MacEachern

=back

Only the major authors are listed above. For contributors see the
Changes file.

=cut
