#####################################################################
# A Perl script to retrieve and join split files 
# making up a Win32 Perl/Apache binary distribution
#
# Files created by hjsplit (http://www.freebyte.com/hjsplit/)
# with the joining accomplished by hj-join
#
# This script is Copyright 2003, by Randy Kobes,
# and may be distributed under the same terms as Perl itself.
# Please report problems to Randy Kobes <randy@theoryx5.uwinnipeg.ca>
#####################################################################

use strict;
use warnings;
use Net::FTP;
use Safe;
use Digest::MD5;
use IO::File;
use ExtUtils::MakeMaker;

die "This is intended for Win32" unless ($^O =~ /Win32/i);

my $dist = 'perl-win32-bin';
my $exe = $dist . '.exe';
my $theoryx5 = 'theoryx5.uwinnipeg.ca';
my $bsize = 102400;
my $kb = sprintf("%d", $bsize / 1024);
print <<"END";

This script will fetch and then join the files needed for 
creating the Perl/Apache Win32 binary distribution
$exe from 
  ftp://$theoryx5/pub/other/$dist/.

If the file transfer is interrupted before all the neccessary
files are joined, run the script again in the same directory;
files successfully fetched earlier will not be downloaded again.

A hash mark represents transfer of $kb kB.

END

my $ans = prompt("Fetch $exe?", 'yes');
die "Installation aborted" unless ($ans =~ /^y/i);

my $ftp = Net::FTP->new($theoryx5);
$ftp->login('anonymous', "$dist\@perl.apache.org")
  or die "Cannot login to $theoryx5";
$ftp->cwd("pub/other/$dist");

my $max = get_max();
my $cs = 'CHECKSUMS';
my $join = 'join32.exe';
my @files = ();

# fetch the CHECKSUMS file
print "Fetching $cs ...";
$ftp->ascii;
$ftp->get($cs);
print " done!\n";
die "Failed to fetch $cs" unless (-e $cs);
push @files, $cs;

my $cksum;
die "Cannot load $cs file" unless ( load_cs() );

# fetch the join program
if (-e $join and verifyMD5($join)) {
  print "Skipping $join ...\n";
}
else {
  print "Fetching $join ...";
  $ftp->binary;
  $ftp->get($join);
  print " done!\n";
  die "Failed to fetch $join" unless (-e $join);
  unless (verifyMD5($join)) {
    print qq{CHECKSUM check for "$join" failed.\n};
    unlink $join or warn "Cannot unlink $join: $!";
    die;
  }
}
push @files, $join;

# fetch the split files
print "\nFetching $max split files ....\n\n"; 
$ftp->hash(1, $bsize);
for (1 .. $max) {
  local $| = 1;
  my $num = $_ < 10 ? "00$_" : "0$_";
  my $file = $dist . '.exe.' . $num;
  push @files, $file;
  if (-e $file) {
    if (verifyMD5($file)) {
      print "Skipping $file ...\n";
      next;
    }
    else {
      unlink $file or warn "Could not unlink $file";
    }
  }
  my $size = sprintf("%d", $ftp->size($file) / 1024);
  print "\nFetching $file ($size kB) ...\n";
  $ftp->get($file);
  print "Done!\n";
  die "Failed to fetch $file" unless (-e $file);
  unless (verifyMD5($file)) {
    print qq{CHECKSUM check for "$file" failed.\n};
    unlink $file or warn "Cannot unlink $file: $!";
    die;
  }
}
print "\nFinished fetching split files\n";
$ftp->quit;

# now join them
my @args = ('join32');
system(@args);
die "Joining files to create $exe failed" unless (-e $exe);

# remove the temporary files, if desired
$ans = prompt('Remove temporary files?', 'yes');
if ($ans =~ /^y/i) {
  unlink(@files) or warn "Cannot unlink temporary files: $!";
}

# run the exe, if desired
$ans = prompt("Run $exe now?", 'yes');
if ($ans =~ /^y/i) {
   @args = ($exe);
   system(@args);
}
else {
   print "\nDouble click on $exe to install\n";
}

# routines to verify the CHECKSUMS for a file
# adapted from the MD5 check of CPAN.pm
sub load_cs {
  my $fh = IO::File->new;
  unless (open $fh, $cs) {
    warn "Could not open $cs: $!";
    return;
  }
  local($/);
  my $eval = <$fh>;
  $eval =~ s/\015?\012/\n/g;
  close $fh;
  my $comp = Safe->new();
  $cksum = $comp->reval($eval);
  if ($@) {
    warn $@;
    return;
  }
  return 1;
}

sub verifyMD5 {
  my $file = shift;
  my ($is, $should);
  unless (open(FILE, $file)) {
    warn "Cannot open $file: $!";
    return;
  }
  binmode(FILE);
  unless ($is = Digest::MD5->new->addfile(*FILE)->hexdigest) {
    warn "Could not compute checksum for $file: $!";
    close(FILE);
    return;
  }
  close(FILE);
  if ($should = $cksum->{$file}->{md5}) {
    my $test = $is eq $should ? 1 : 0;
    printf qq{  Checksum for "$file" is %s\n}, 
      ($test == 1) ? 'OK.' : 'NOT OK.';
    return $test;
  }
  else {
    warn "Checksum data for $file not present in CHECKSUMS.\n";
    return;
  }
}

# get number of split files
sub get_max {
  my $dir = $ftp->ls();
  my $count = 0;
  foreach (@$dir) {
    $count++ if m!$dist.exe.\d+!;
  }
  return $count;
}
