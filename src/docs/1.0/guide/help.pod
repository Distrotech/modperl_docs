=head1 NAME

Getting Help

=head1 Description

If your question isn't answered by reading this guide, check this section
for information on how to get help on mod_perl, Apache, or other topics
discussed here.

=head1 READ ME FIRST

If, after reading this guide, the L<general docs|docs::general::index>
and the L<other documents|docs::offsite::index> listed on this site,
you still don't have the answers/information needed, please ask for
help on the L<mod_perl users mailing list|maillist::modperl>.
But please, first try to browse the L<mailing list
archive|maillist::modperl/Searchable_Archives>.  Most of the time
you will find the answer to your questions by searching the archive,
since it is very likely that someone else has already encountered the
same problem and found a solution for it.  If you ignore this advice,
you should not be surprised if your question is left unanswered - it
bores people to answer the same question more than once.  This does
not mean that you should avoid asking questions, but you should not
abuse the available help and you should I<RTFM> before you call for
I<HELP>.  (Remember the fable of the shepherd boy and the wolves).

Another possibilty is to look in the general L<Getting
Help|help::index> section of this site for a commercial training or
consulting company.

=head1 How to Report Problems

Always send these details:

=over

=item * Anything in the I<error_log> file that looks suspicious and possibly related to the problem.

=item * Output of C<perl -V>

=item * Version of mod_perl

=item * Version of apache

=item * Options given to mod_perl's Makefile.PL

=item * Server configuration details

=item * Relevant sections of your ErrorLog (make test's is: t/logs/error_log)

=item * If 'make test' fails, the output of 'make test TEST_VERBOSE=1'

=back

Also check whether:

=over

=item * 'make test' passes 100%?

=item * the script works under mod_cgi if applicable

=back

You should try to isolate the problem and send the smallest possible
code snippet, that reproduces the problem. If the issue is unique and
we cannot reproduce the problem, it's hard to solve it.

=over

=item Getting the Backtrace From Core Dumps

If you get a I<core> file dump (I<Segmentation fault>), please send a
backtrace if possible.  Before you try to produce it, re-build
mod_perl with:

  panic% perl Makefile.PL PERL_DEBUG=1

which will:

=over

=item * add C<-g> to C<EXTRA_CFLAGS>

=item * turn on C<PERL_TRACE>

=item * set C<PERL_DESTRUCT_LEVEL=2> (additional checks during Perl cleanup)

=item * link against I<libperld> if it exists

=back

Here is a summary of how to get a backtrace:

  % cd mod_perl-x.xx
  % touch t/conf/srm.conf
  % gdb ../apache_x.xx/src/httpd
  (gdb) run -X -f `pwd`/t/conf/httpd.conf -d `pwd`/t
  [now make request that causes core dump]
  (gdb) bt

So you go to the mod_perl source directory, create an empty
I<srm.conf> file, and start gdb with a path to the httpd binary, which
is at least located in the Apache source tree after you built it. (Of
course replace I<x> with real version numbers). Next step is to start
the httpd from within gdb and issue a request, which causes a core
dump. when the code has died with SEGV sygnal, run I<bt> to get the
backtrace.

Alternatively you can also attach to an already running process like
so:

  % gdb httpd <process id number>

If the dump is happening in I<libperl> you have to rebuild Perl with
C<-DDEBUGGING> enabled. A quick way to this is to go to your Perl
source tree and run these commands:

  % rm *.[oa]
  % make LIBPERL=libperld.a
  % cp libperld.a $Config{archlibexp}/CORE

where C<$Config{archlibexp}> is:

  % perl -V:archlibexp

=item Spinning Processes

The gdb attaching to the live process approach is helpful when
debugging a I<spinning> process.  You can also get a Perl stacktrace
of a I<spinning> process by install a C<$SIG{USR1}> handler in your
code:

  use Carp ();
  $SIG{USR1} = \&Carp::confess;

While the process is spinning, send it a I<USR1> signal:

  % kill -USR1 <process id number>

and the Perl stack trace will be printed.

alternatively you can use gdb to find which Perl code is causing the
spin:

  % gdb httpd <pid of spinning process>
  (gdb) where
  (gdb) source mod_perl-x.xx/.gdbinit
  (gdb) curinfo

After loading the special macros file (I<.gdbinit>) you can use the
I<curinfo> gdb macro to figure out the file and line number the code
stuck in.

=back

Finally send all these details to the modperl mailing list.

=head1 Maintainers

Maintainer is the person(s) you should contact with updates,
corrections and patches.

=over

=item * 

Stas Bekman E<lt>stas (at) stason.orgE<gt>

=back


=head1 Authors

=over

=item *

Stas Bekman E<lt>stas (at) stason.orgE<gt>

=back

Only the major authors are listed above. For contributors see the
Changes file.


=cut
