=head1 NAME

CVS Howto

=head1 Description

A short description how to use CVS to access the mod_perl and related
projects source distributions.

Just as cvs access to the Apache development tree, the mod_perl code
pulled from cvs is not guaranteed to do anything, especially not
compile or work.  But, that's exactly why we are using cvs, so
everyone has access the latest version and can help see to it that
mod_perl does compile and work on all platforms, with the various
versions and configurations of Perl and Apache.  Patches are always
welcome and simply testing the latest snapshots is just as, if not
more helpful.

It's recommended to subscribe to the L<modperl-cvs|maillist::cvs>
list, which is the place cvs commit logs and diffs are mailed to; at
least if you're going to work on the code.

=head1 Anonymous CVS

You can get cvs here: http://www.cvshome.org/

=head2 Checking Out

To checkout a fresh copy run the following commands from the directory
you want the sources to stay in:

  % cvs -d ":pserver:anoncvs@cvs.apache.org:/home/cvspublic" login

(use the password "anoncvs")

  % cvs -d ":pserver:anoncvs@cvs.apache.org:/home/cvspublic" co modperl

After cvs has finished downloading the files you will find a new
directory called I<modperl> in the current working directory.

=head2 keeping your copy up to date

To keep your local copy in sync with the repository, do

  % cvs update -dP

in the top directory of the project. You should run update evertime
before you start working on the project.

=head2 Sending Patches

To send a patch, first run:

  % cvs diff -u

in the top directory of the project. The output of diff will be sent
to STDOUT, so it might be better to redirect the output to a file:

  % cvs diff -u > patch

If you added files or directories to the project, do a diff against
I</dev/null>:

  % diff -u /dev/null newdir/newfilename

When this patch is applied, the new dir and the new file will be
automatically created.

On Windows-based systems, you can do

  % diff -u NUL newdir/newfilename

instead.

Then send your patch to the maintainer of the project, or the
appropriate mailing list.

=head2 Useful Default Parameters

Here are some recommended parameters. Save them in I<~/.cvsrc>, so
you don't have to type them everytime you use cvs.

  cvs -z9
  update -dP
  diff -u

=over

=item *

I<cvs -z9> sets the compression level to 9 (the highest value) to
speed up downloading.

=item *

I<update -d> automatically creates directories that are missing in
your local copy because they where added to the repository after your
initial checkout or your last update.

=item *

I<update -P> automatically deletes empty directories.

=item *

I<diff -U> to use the unified output format so that your changes can
be easily merged back into the repository.

=back

=head1 cvsup

C<cvsup> has come out of the FreeBSD group. It's a client/server beast
that offers an efficient way to sync collections of files over the
net, and it is very CVS aware, allowing synchronisation of
repositories or checked out files using the cvs deltas to bring the
client side files up to date with minimal data transfer.

For a FreeBSD cvsup client see
http://www.freebsd.org/cgi/ports.cgi?query=cvsup&stype=all

Others (SunOS, alpha.osf, linux, Solaris2.4, HPAA 10.2, irix):
ftp://ftp.postgresql.org/pub/CVSup/

Here's a config file for the client (cvsup) to sync modperl sources.

  *default tag=.
  # comment out the above if you want the raw cvs files
  
  *default host=cvs.apache.org
  *default prefix=/path/on/this/machine/to/install/
  # a subdir for modperl will appear here ^^^
  
  *default base=/path/on/this/machine/where/cvsup/will/keep/status/info
  # you'll never need to look in the 'base' dir.
  
  *default release=cvs delete use-rel-suffix compress
  
  modperl
  #apache-1.3
  #apache-docs
  #modperl-2.0
  #httpd-2.0
  #modperl-docs
  #make your picks above by uncommenting the entries


=head1 Inspecting the CVS server with ViewCVS

ViewCVS is installed on the Apache CVS server. You can reach it at
http://cvs.apache.org/viewcvs.cgi/.

From there you can browse the list of available projects, look at the
files contained in those projects, their logs, and do colored diffs
between versions. This is information you can get from your CVS client
(through C<cvs log>, C<cvs diff> and friends), but the web interface
makes it much easier to get a good overview of the different files.

=head1 CVS+SSH access for mod_perl committers

If you are lucky enough to have commit access to the mod_perl CVS
repositories, you'll have to use SSH together with CVS for added
security. We suppose that you have the user name I<user> and password
I<pass>, whcih you will have received from the sysadmin.

Firt, you'll need an SSH client running from the shell. For Unix, look
to http://www.openssh.org/. For Windows, you might want to look at
Putty, http://www.chiark.greenend.org.uk/~sgtatham/putty/, especially
the I<plink> client which runs from the command line.

=head2 Checking out

The checkout procedure is approximately the same as for anonymous
CVS. However, some additional measures need to be taken beforehand.

First of all, set your C<CVS_RSH> environment variable to C<ssh> (if
your SSH program has a different name, such as I<plink>, use that
instead):

  % export CVS_RSH=ssh

This all depends on which shell you are running under. You should add
this your I<.bashrc> or similar file, so that it's set on startup. For
Windows, add the line

  set CVS_RSH=ssh

to I<autoexec.bat>, or set the environment variable through the System
section of the Control Panel on NT systems.

Second, your CVS Root now changes. Check out with the line:

  % cvs -d :ext:user@cvs.apache.org:/home/cvs co modperl

Next, SSH will probably ask you if you want to allow the host
I<cvs.apache.org>. Answer yes. Then you are asked for your password;
type it in. Now you will get a freshly checked out copy of the
I<modperl> repository.

=head2 Working with CVS

Normally, most changes should go through peer review first. It might
be a good idea to discuss the intricacies of a change on the
appropriate mailing list before commiting anything. Then, to commit:

  % cvs update
  % cvs commit

Running C<cvs update> avoids any problems with out of date versions of
files. If you get any conflicts because of it, these must be changed
before doing C<cvs commit>, which will incorporate any changes into
the repository. To commit only a single file, do:

  % cvs commit path/to/file

To add a file:

  % cvs add path/to/file

If it is a binary file, you must make sure to do:

  % cvs add -kb path/to/binary/file

Then, to add it permanently, you will have to commit it.

One B<very> important note before (ab)using your powers: the mod_perl
documentation project makes use of an automatic build system. This
means that any changes commited will be periodically rebuilt to create
the new site. This is great, but a side-effect of this is that if
someone commits anything that doesn't work, the build will fail, and
might leave the site unavailable. 

To avoid these problems, please make sure to run C<bin/build> on your
working copy to test I<before> commiting. Also, make sure to run C<cvs
update> to check that you have added all files to the repository, it
can happen quickly to forget adding the files you had changed!

=head2 Avoiding typing in the password

From the ssh man page:

  As a third authentication method, ssh supports RSA based
  authentication. The scheme is based on public-key cryptography:
  there are cryptosystems where encryption and decryption are done
  using separate keys, and it is not possible to derive the decryption
  key from the encryption key. RSA is one such system. The idea is
  that each user creates a public/private key pair for authentication
  purposes. The server knows the public key, and only the user knows
  the private key. The file $HOME/.ssh/authorized_keys lists the
  public keys that are permitted for logging in. When the user logs
  in, the ssh program tells the server which key pair it would like to
  use for authentication. The server checks if this key is permitted,
  and if so, sends the user (actually the ssh program running on
  behalf of the user) a challenge, a random number, encrypted by the
  user's public key. The challenge can only be decrypted using the
  proper private key. The user's client then decrypts the chal- lenge
  using the private key, proving that he/she knows the private key but
  without disclosing it to the server.
  
  ssh implements the RSA authentication protocol automatically. The
  user creates his/her RSA key pair by running ssh-keygen(1). This
  stores the private key in $HOME/.ssh/identity and the public key in
  $HOME/.ssh/identity.pub in the user's home directory. The user
  should then copy the identity.pub to $HOME/.ssh/authorized_keys in
  his/her home directory on the remote machine (the authorized_keys
  file corresponds to the conventional $HOME/.rhosts file, and has one
  key per line, though the lines can be very long). After this, the
  user can log in without giving the password. RSA authentication is
  much more secure than rhosts authentication.

=head1 mod_perl and Related Projects on cvs.apache.org

=over

=item modperl

sources for mod_perl 1.x, for use with apache-1.3

=item apache-1.3

the Apache 1.3 HTTP Server

=item modperl-2.0

the new version of mod_perl, for use with httpd-2.0. See the L<install
docs|docs::2.0::user::install::install> for more information about
downloading the 2.0 components and installing them.

=item httpd-2.0

the new Apache 2.0 HTTP Server

=item apr

needed for modperl-2.0

=item apr-util

needed for modperl-2.0

=item modperl-docs

the mod_perl documentation (i.e. this site). See the L<documentation
download|download::docs> for information on how to download, build and
submit patches to the documentation.

=back

Or see http://cvs.apache.org/viewcvs.cgi/ for a list of all projects.

=head1 See also

=over

=item * 

http://httpd.apache.org/dev/anoncvs.txt

For a basic introduction to Anonymous CVS on the Apache CVS server.

=item * 

http://cvsbook.red-bean.com/

Open Source Development with CVS is a book published by Coriolis Inc.
as part of the Coriolis OpenPress series. Chapters 2, 4, 6, 8, 9, and
10 -- comprising a complete introduction, tutorial and reference to
CVS -- are being released free under the terms of the GNU General
Public License.

=item * 

http://www.cvshome.org/docs/manual/

Version Management with CVS by Per Cederqvist et al is the "official"
manual for CVS.  Commonly known as "the Cederqvist," the manual covers
repositories, branches, and file maintenance, and includes reference
material for both CVS users and CVS repository administrators.

=back

=head1 Maintainers

Maintainer is the person(s) you should contact with updates,
corrections and patches.

=over

=item *

the L<documentation mailing list|maillist::docs-dev>

=back


=head1 Authors

=over

=item *

Thomas Klausner E<lt>domm (at) zsi.atE<gt>

=item *

Doug MacEachern

=item *

Per Einar Ellefsen E<lt>per.einar (at) skynet.beE<gt>

=back

Only the major authors are listed above. For contributors see the
Changes file.

=cut
