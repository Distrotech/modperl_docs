=head1 NAME

Apache::Module - Perl API for creating and working with Apache modules




=head1 Synopsis

  use Apache::Module ();
  
  for (my $modp = Apache::Module->top_module; $modp; $modp = $modp->next) {
      my $name = $modp->name;
      my $version = $modp->version;
      my $minor_version = $modp->minor_version;
      my $index = $modp->module_index;
      my $commands = $modp->cmds;
  }
  
  sub MyDirective {
      my ($self, $parms, $args) = @_;
      my  $srv_cfg = Apache::Module->get_config($self, $parms->server);
      [...]
  }



=head1 Description

The API provided by this module opens up access to Apache's internal module
list. It can be used to find and query currently enabled/loaded modules.

See L<Apache Server Configuration Customization in
Perl|docs::2.0::user::config::custom>.


=head1 API

C<Apache::Module> provides the following functions and/or methods:






=head2 C<cmds>

Get an C<L<Apache::Command|docs::2.0::api::Apache::Command>> object
that describes all of the directives this module defines.

  $cmd_rec = $module->cmds();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item ret: C<$cmd_rec>
( C<L<Apache::Command object|docs::2.0::api::Apache::Command>> )

=item since: 1.99_12

=back







=head2 C<get_config>

Retrieves a module's configuration. Used by configuration directives.

  $cfg = Apache::Module->get_config($self, $parms->server);
  $cfg = Apache::Module->get_config($self, $r->server, $r->per_dir_config);

=over 4

=item obj: C<$self> ( string or ref )

The name of the Perl module this configuration is for

=item obj: C<$server> 
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item obj: C<$dir_config>
( C<L<Apache::ConfVector object|docs::2.0::api::Apache::ConfVector>> )

=item ret: C<$cfg> (HASH)

The hash holding the module configuration data.

=back

See also L<Apache Server Configuration Customization in Perl|docs::2.0::user::config::custom>






=head2 C<find_linked_module>

Find a module based on the name of the module

  $modp = Apache::Module::find_linked_module($name);

=over 4

=item obj: C<$name> ( string )

the name of the module

=item ret: C<$modp>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

the module structure if found, undef otherwise

=item since: 1.99_12

=back





=head2 C<loaded>

Determines if a certain module is loaded

  if (Apache::Module->loaded($module)) {
     [...]
  }
  
  if (Apache::Module->loaded('Apache::Status')) {
     [...]
  }

The argument to this function can be many things. If the module ends in
'.c', true will be returned if that module is loaded  If the module ends
in '.so', true will be returned if that module is loaded and was loaded
as a DSO with LoadModule. Otherwise, true will be returned if that Perl
module is loaded.

=over 4

=item name: C<$module> ( string )

the name of the module

=item ret: ( boolean )

=back

=head2 C<minor_version>

API minor version. Provides API feature milestones. Not checked
during module init

  $minor_version = $module->minor_version();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item ret: C<$minor_version> ( integer )

=item since: 1.99_12

=back





=head2 C<module_index>

Index to this modules structures in config vectors.

  $index = $module->module_index();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item ret: C<$index> ( integer )

=item since: 1.99_12

=back





=head2 C<name>

The name of the module's C file

  $name = $module->name();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item ret: C<$name> ( string )

=item since: 1.99_12

=back





=head2 C<next>

The next module in the list, undef if the last module in the list.

  $next_module = $module->next();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item ret: C<$next_module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item since: 1.99_12

=back








=head2 C<remove_loaded_module>

Remove a module from the chained modules list and the list of loaded
modules

  $module->remove_loaded_module();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )


=item ret: no return value

=item since: 1.99_12

=back



=head2 C<remove_module>

Remove a module from the server.  There are some caveats:
when the module is removed, its slot is lost so all the current
per-dir and per-server configurations are invalid. So we should
only ever call this function when you are invalidating almost
all our current data. I.e. when doing a restart.

  $module->remove_module();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

the module structure of the module to remove

=item ret: no return value

=item since: 1.99_12

=back






=head2 C<top_module>

Returns the first module in the module list. Usefull to start a
module iteration.

  $ret = Apache::Module->top_module();

=over 4

=item obj: C<Apache::Module> ( class name )

=item ret: C<$ret>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item since: 1.99_12

=back





=head2 C<version>

API version, B<not> module version; check that module is
compatible with this version of the server.

  $version = $module->version();

=over 4

=item obj: C<$module>
( C<L<Apache::Module object|docs::2.0::api::Apache::Module>> )

=item ret: C<$version> ( integer )

=item since: 1.99_12

=back





=head1 See Also

L<mod_perl 2.0 documentation|docs::2.0::index>.




=head1 Copyright

mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.




=head1 Authors

L<The mod_perl development team and numerous
contributors|about::contributors::people>.

=cut

