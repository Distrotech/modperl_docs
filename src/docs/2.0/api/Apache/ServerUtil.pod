=head1 NAME

Apache::ServerUtil - Perl API for Apache server record utils




=head1 Synopsis

  use Apache::ServerUtil ();
  
  $s = Apache->server;
  my $srv_cfg = $s->dir_config;
  
  # get 'conf/' dir path using $s
  my $conf_dir = $s->server_root_relative('conf');
  
  # server level PerlOptions flags lookup
  $s->push_handlers(ChildExit => \&child_exit)
      if $s->is_perl_option_enabled('ChildExit');



META: to be completed




=head1 Description

C<Apache::ServerUtil> provides the L<Apache server
object|docs::2.0::api::Apache::Server> utilities API.





=head1 Functions API




=head2 C<add_version_component>

META: Autogenerated - needs to be reviewed/completed

Add a component to the version string

  add_version_component($pconf_pool, $component);

=over 4

=item obj: C<$pconf>
( C<L<APR::Pool object|docs::2.0::api::APR::Pool>> )

The pool to allocate the component from (should really be a
C<$pconf_pool>)

=item arg1: C<$component> ( string )

The string to add

=item ret: no return value

=item since: 1.99_10

=back





=head2 C<exists_config_define>

Check for a definition from the server command line

  $result = Apache::exists_config_define($name);

=over 4

=item obj: C<$name> ( string )

The define to check for

=item ret: C<$result> ( boolean )

true if defined, false otherwise

=item since: 1.99_10

=back

For example:

  print "this is mp2" if Apache::exists_config_define('MODPERL2');




=head2 C<get_server_built>

Get the date and time that the server was built

  $when_built = Apache::ServerUtil::get_server_built();

=over 4

=item ret: C<$when_built> ( string )

The server build time string

=item since: 1.99_10

=back






=head2 C<get_server_version>

Get the server version string

  $version = Apache::ServerUtil::get_server_version();

=over 4

=item ret: C<$version> ( string )

The server version string

=item since: 1.99_10

=back






=head2 C<server_root>

returns the value set by the top-level C<ServerRoot> directive.

  $server_root = Apache::ServerUtil::server_root();

=over 4

=item ret: C<$server_root> ( string )

=item since: 1.99_10

=back









=head1 Methods API

C<Apache::ServerUtil> provides the following functions and/or methods:



=head2 C<add_config>

Dynamically add Apache configuration:

  $s->add_config($lines);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item arg1: C<$lines> ( ARRAY ref )

An ARRAY reference containing configuration lines per element, without
the new line terminators.

=item ret: no return value

=item since: 1.99_10

=back

See also:
C<L<$r-E<gt>add_config|docs::2.0::api::Apache::RequestUtil/C_add_config_>>

For example:

Add a configuration section at the server startup (e.g. from
I<startup.pl>):

  use Apache::ServerUtil ();
  my $conf = <<'EOC';
  PerlModule Apache::MyExample
  <Location /perl>
    SetHandler perl-script
    PerlResponseHandler Apache::MyExample
  </Location>
  EOC
  Apache->server->add_config([split /\n/, $conf]);



=head2 C<dir_config>

C<$s-E<gt>dir_config()> provides an interface for the per-server
variables specified by the C<PerlSetVar> and C<PerlAddVar> directives,
and also can be manipulated via the
C<L<APR::Table|docs::2.0::api::APR::Table>> methods.

  $table  = $s->dir_config();
  $value  = $s->dir_config($key);
  @values = $s->dir_config($key);
  $s->dir_config($key, $val);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item opt arg2: C<$key> ( string )

Key string

=item opt arg3: C<$val> ( string )

Value string

=item ret: ...

Depends on the passed arguments, see further discussion

=item since: 1.99_10

=back

The keys are case-insensitive.

  $t = $s->dir_config();

dir_config() called in a scalar context without the C<$key> argument
returns a I<HASH> reference blessed into the I<APR::Table> class. This
object can be manipulated via the I<APR::Table> methods. For available
methods see I<APR::Table>.

  @values = $s->dir_config($key);

If the C<$key> argument is passed in the list context a list of all
matching values will be returned. This method is ineffective for big
tables, as it does a linear search of the table. Thefore avoid using
this way of calling dir_config() unless you know that there could be
more than one value for the wanted key and all the values are wanted.

  $value = $s->dir_config($key);

If the C<$key> argument is passed in the scalar context only a single
value will be returned. Since the table preserves the insertion order,
if there is more than one value for the same key, the oldest value
assosiated with the desired key is returned. Calling in the scalar
context is also much faster, as it'll stop searching the table as soon
as the first match happens.

  $s->dir_config($key => $val);

If the C<$key> and the C<$val> arguments are used, the set() operation
will happen: all existing values associated with the key C<$key> (and
the key itself) will be deleted and C<$value> will be placed instead.

  $s->dir_config($key => undef);

If C<$val> is I<undef> the unset() operation will happen: all existing
values associated with the key C<$key> (and the key itself) will be
deleted.






=head2 C<error_log2stderr>

Start sending STDERR to the error_log file

  $s->error_log2stderr();

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

The current server

=item ret: no return value

=item since: 1.99_10

=back

This method may prove useful if you want to start redirecting STDERR
to the error_log file before Apache does that on the startup.






=head2 C<get_handlers>

Returns a reference to a list of handlers enabled for
a given phase.

  $handlers_list = $s->get_handlers($hook_name);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item arg1: C<$hook_name> ( string )

a string representing the phase to handle.

=item ret: C<$handlers_list> (ref to an ARRAY of CODE refs)

a list of references to the handler subroutines

=item since: 1.99_10

=back

See also:
C<L<$r-E<gt>add_config|docs::2.0::api::Apache::RequestUtil/C_get_handlers_>>

For example:

A list of handlers configured to run at the I<child_exit> phase:

  @handlers = @{ $s->get_handlers('PerlChildExitHandler') || []};







=head2 C<is_perl_option_enabled>

check whether a server level C<PerlOptions> flag is enabled or not.

  $result = $s->is_perl_option_enabled($flag);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item arg1: C<$flag> ( string )

=item ret: C<$result> ( boolean )

=item since: 1.99_10

=back

For example to check whether the C<ChildExit> hook is enabled (which
can be disabled with C<PerlOptions -ChildExit>) and configure some
handlers to run if enabled:

  $s->push_handlers(ChildExit => \&child_exit)
      if $s->is_perl_option_enabled('ChildExit');

See also:
L<PerlOptions|docs::2.0::user::config::config/C_PerlOptions_> and
L<the equivalent function for directory level PerlOptions
flags|docs::2.0::api::Apache::RequestUtil/C_is_perl_option_enabled_>.







=head2 C<psignature>

META: Autogenerated - needs to be reviewed/completed

Get HTML describing the address and (optionally) admin of the server.

  $sig = $rXXXX->psignature($prefix);

=over 4

=item obj: C<$rXXX> (C<L<Apache::RequestRec|docs::2.0::api::Apache::RequestRec>>)

=item arg1: C<$prefix> ( string )

Text which is prepended to the return value

=item ret: C<$sig> ( string )

HTML describing the server

=item since: 1.99_10

=back






=head2 C<push_handlers>

Add one or more handlers to a list of handlers to be called for a
given phase.

  $ok = $s->push_handlers($hook_name => \&handler);
  $ok = $s->push_handlers($hook_name => [\&handler, \&handler2]);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item arg1: C<$hook_name> ( string )

the phase to add the handlers to

=item arg2: C<$handlers> ( CODE ref or SUB name or an ARRAY ref )

a single handler CODE reference or just a name of the subroutine
(fully qualified unless defined in the current package).

if more than one passed, use a reference to an array of CODE refs
and/or subroutine names.

=item ret: C<$ok> ( boolean )

returns a true value on success, otherwise a false value

=item since: 1.99_10

=back

See also:
C<L<$r-E<gt>add_config|docs::2.0::api::Apache::RequestUtil/C_push_handlers_>>

Examples:

A single handler:

  $s->push_handlers(PerlChildExitHandler => \&handler);

Multiple handlers:

  $s->push_handlers(PerlChildExitHandler => ['Foo::Bar::handler', \&handler2]);

Anonymous functions:

  $s->push_handlers(PerlLogHandler => sub { return Apache::OK });







=head2 C<server>

Get the main server's object

  $main_s = Apache->server();

=over 4

=item obj: C<Apache> (class name)

=item ret: C<$main_s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item since: 1.99_10

=back












=head2 C<server_root_relative>

Returns the canonical form of the filename made absolute to
C<ServerRoot>:

  $path = $s->server_root_relative($fname);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item opt arg2: C<$fname> ( string )

=item ret: C<$path> ( string )

=item since: 1.99_10

=back

C<$fname> is appended to the value of C<ServerRoot> and returned. For
example:

  my $log_dir = Apache::server_root_relative($r->pool, 'logs');

If C<$fname> is not specified, the value of C<ServerRoot> is returned
with a trailing C</>. (it's the same as using C<''> as C<$fname>'s
value).

Also see the C<L<Apache::server_root|/C_Apache__server_root_>>
constant.




=head2 C<set_handlers>

Set a list of handlers to be called for a given phase. Any previously
set handlers are forgotten.

  $ok = $s->set_handlers($hook_name => \&handler);
  $ok = $s->set_handlers($hook_name => [\&handler, \&handler2]);
  $ok = $s->set_handlers($hook_name => []);
  $ok = $s->set_handlers($hook_name => undef);

=over 4

=item obj: C<$s>
( C<L<Apache::ServerRec object|docs::2.0::api::Apache::ServerRec>> )

=item arg1: C<$hook_name> ( string )

the phase to set the handlers in

=item arg2: C<$handlers> ( CODE ref or SUB name or an ARRAY ref )

a reference to a single handler CODE reference or just a name of the
subroutine (fully qualified unless defined in the current package).

if more than one passed, use a reference to an array of CODE refs
and/or subroutine names.

if the argument is C<undef> or C<[]> the list of handlers is reset to
zero.

=item ret: C<$ok> ( boolean )

returns a true value on success, otherwise a false value

=item since: 1.99_10

=back

See also:
C<L<$r-E<gt>add_config|docs::2.0::api::Apache::RequestUtil/C_set_handlers_>>

Examples:

A single handler:

  $r->set_handlers(PerlChildExitHandler => \&handler);

Multiple handlers:

  $r->set_handlers(PerlFixupHandler => ['Foo::Bar::handler', \&handler2]);

Anonymous functions:

  $r->set_handlers(PerlLogHandler => sub { return Apache::OK });

Reset any previously set handlers:

  $r->set_handlers(PerlCleanupHandler => []);

or

  $r->set_handlers(PerlCleanupHandler => undef);







=head1 See Also

L<mod_perl 2.0 documentation|docs::2.0::index>.




=head1 Copyright

mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.




=head1 Authors

L<The mod_perl development team and numerous
contributors|about::contributors::people>.

=cut

