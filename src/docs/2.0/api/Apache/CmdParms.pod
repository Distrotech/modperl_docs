=head1 NAME

Apache::CmdParms - Perl API for Apache command parameters object




=head1 Synopsis

  use Apache::CmdParms ();
  use Apache::Const -compile => qw(NOT_IN_LOCATION);
  
  sub MyDirective {
    my ($self, $parms, $args) = @_;
    
    # this command's command object
    $cmd = $parms->cmd;
    
    # check the current command's context
    $error = $parms->check_cmd_context(Apache::NOT_IN_LOCATION);

    # this command's context
    $context = $parms->context;    

    # this command's directive object
    $directive = $parms->directive;
    
    # the extra information passed thru cmd_data in @APACHE_MODULE_COMMANDS
    $info = $parms->info;
    
    # which methods are <Limit>ed ?
    $limit = $parms->limited;
    
    # which allow-override bits are set
    $override = $parms->override;
    
    # the path this command is being invoked in
    $path = $parms->path;
    
    # this command's pool
    $p = $parms->pool;
    
    # this command's configuration time pool
    $p = $parms->temp_pool;
  }





=head1 Description

C<Apache::CmdParms> provides the Perl API for Apache command
parameters object.




=head1 API

C<Apache::CmdParms> provides the following functions and/or methods:





=head2 C<cmd>

This module's command information

  $cmd = $parms->cmd();

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$cmd>
( C<L<Apache::Command object|docs::2.0::api::Apache::Command>> )

=item since: 1.99_12

=back





=head2 C<check_cmd_context>

Check the current command against a context bitmask of forbidden contexts.

  $error = $parms->check_cmd_context(Apache::NOT_IN_LOCATION);

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$error>

If the context is forbidden, this method returns a textual description
of why it was forbidden. If the context is permitted, this method returns
C<undef>.

=item since: 1.99_16

=back



=head2 C<directive>

This command's directive object in the configuration tree

  $directive = $parms->directive;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$newval>
( C<L<Apache::Directive object|docs::2.0::api::Apache::Directive>> )

The current directive node in the configuration tree

=item since: 1.99_12

=back






=head2 C<info>

The extra information passed thru C<cmd_data> in 
C<L<@APACHE_MODULE_COMMANDS|docs::2.0::user::config::custom/C_cmd_data_>>

  $info = $parms->info;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$info> (string)

The string passed in C<cmd_data>

=item since: 1.99_12

=back






=head2 C<limited>

Which methods are currently E<lt>LimitE<gt>ed

  $limit = $parms->limited;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$limit> (integer)

=item since: 1.99_12

=back





=head2 C<override>

Which allow-override bits are set

  $override = $parms->override;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$override> (integer)

=item since: 1.99_12

=back





=head2 C<path>

The current pathname/location/match of the block this command is in

  $path = $parms->path;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$path> (string)

If configuring for a block like E<lt>LocationE<gt>, E<lt>LocationMatchE<gt>,
E<lt>DirectoryE<gt>, etc, the pathname part of that directive. Otherwise, 
C<undef> is returned.

=item since: 1.99_12

=back



=head2 C<pool>

Pool associated with this command

  $p = $parms->pool;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$p>
(C<L<APR::Pool|docs::2.0::api::APR::Pool>>)

=item since: 1.99_12

=back






=head2 C<server>

The server this command is appearing in

  $s = $parms->server;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$s> (C<L<Apache::Server|docs::2.0::api::Apache::ServerRec>>)

=item since: 1.99_12

=back






=head2 C<temp_pool>

Pool for scratch memory; persists during configuration, but
wiped before the first request is served...

  $p = $parms->temp_pool;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$p> (C<L<APR::Pool|docs::2.0::api::APR::Pool>>)

=item since: 1.99_12

=back





=head1 Unsupported API

C<Apache::CmdParms> also provides auto-generated Perl interface for
a few other methods which aren't tested at the moment and therefore
their API is a subject to change. These methods will be finalized
later as a need arises. If you want to rely on any of the following
methods please contact the L<the mod_perl development mailing
list|maillist::dev> so we can help each other take the steps necessary
to shift the method to an officially supported API.






=head2 C<context>

Get context containing pointers to modules' per-dir
config structures.

  $context = $parms->context;

=over 4

=item parms: C<$parms>
( C<L<Apache::CmdParms object|docs::2.0::api::Apache::CmdParms>> )

=item ret: C<$newval>
( C<L<Apache::ConfVector object|docs::2.0::api::Apache::ConfVector>> )

Returns the commands' per-dir config structures

=item since: 1.99_12

=back





=head1 See Also

L<mod_perl 2.0 documentation|docs::2.0::index>.




=head1 Copyright

mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.




=head1 Authors

L<The mod_perl development team and numerous
contributors|about::contributors::people>.

=cut

