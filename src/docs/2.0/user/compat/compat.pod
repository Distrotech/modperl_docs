=head1 NAME

mod_perl 1.x versus mod_perl 2.x compatibility issues

=head1 Code Porting from 1.x to 2.x

mod_perl 2.x is trying hard to be back compatible with mod_perl
1.x. However some things (mostly APIs) have been changed. In order to
gain a complete compatibilty with 1.x while running under 2.x, you
should build mod_perl with C<MP_COMPAT_1X=1> and load the
compatibility module as early as possible:

  use Apache::compat;

at the server startup. And unless there are forgotten things or bugs,
your code should work without any changes under 2.x series.

However, unless you want to keep the 1.x compatibility, you should try
to remove the compatibility layer and adjust your code to work under
2.x without it. You want to do it mainly for the performance
improvement.

This document explains what APIs have changed and what new APIs should
be used instead.

=head1 Configuration Directives

To continue using mod_perl configuration files from 1.x, build
mod_perl with C<MP_COMPAT_1X=1>. To migrate the configuration files to
the 2.x syntax, you may need to do certain adjustments if you use any
of the configuration directives listed in the following sections.

Remember that if you use any of the new directives you configuration
won't work anymore with mod_perl 1.x.

=head2 PerlHandler

Replaced with C<PerlResponseHandler>.

=head2 PerlSendHeader

Replaced with C<PerlOptions +/-ParseHeaders> directive.

  PerlSendHeader On  => Options +ParseHeaders
  PerlSendHeader Off => Options -ParseHeaders

=head2 PerlSetupEnv

Replaced with C<PerlOptions +/-SetupEnv> directive.

  PerlSendHeader On  => Options +SetupEnv
  PerlSendHeader Off => Options -SetupEnv

=head2 PerlTaintCheck

Now can be turned on with:

  PerlSwitches -T

The default is I<Off>. You cannot turn it I<Off> once it's turned
I<On>.

=head2 PerlWarn

Now can be turned on with:

  PerlSwitches -w





=head1 Apache API

To continue using Apache API from 1.x, load the compatibility module
as early as possible:

  use Apache::compat;

at the server startup.

=head2 gensym

Since Perl 5.6.1 filehandlers are autovivified and there is no need
for gensym() function, since now it can be done with:

  open my $fh, "foo" or die $!;

The C function modperl_perl_gensym() is available for XS/C extension
writers, though.

=head2 Apache::File



=head1 Apache::Registry and Apache::PerlRun and Other mod_cgi Emulators

C<Apache::Registry> and C<Apache::PerlRun> now live in the
C<ModPerl::> namespace to avoid collisions with the versions from 1.x.

To run the 1.x C<Apache::Registry> you have to load C<Apache::compat>:

  file:startup.pl:
  ----------------
  use Apache::compat ();
  use lib ...; #or something to find 1.xx Apache::Registry

then in I<httpd.conf>:

  Alias /perl /path/to/perl/scripts
  <Location /perl>
     Options +ExecCGI
     SetHandler modperl
     PerlResponseHandler Apache::Registry
  </Location>

Notice that C<Apache::compat> has to be loaded before C<CGI.pm> if the
latter module is used.

META: complete


=head1 Apache::StatINC

C<Apache::StatINC> has been replaced by C<Apache::Reload>.



=head1 Maintainers

Maintainer is the person(s) you should contact with updates,
corrections and patches.

Stas Bekman E<lt>stas (at) stason.orgE<gt>

=head1 Authors

=over

=item * Stas Bekman E<lt>stas (at) stason.orgE<gt>

=back

=cut
