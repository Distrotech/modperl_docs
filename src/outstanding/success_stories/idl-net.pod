###################################################
# WARNING: Do not edit this file!
#          If you do the changes will be lost!
# Instead edit the corresponding .txt file and run make.pl
#
# Don't forget to commit the changes to both .txt and the generated
# .pod to svn, since others won't run the local make.pl
####################################################

=head1 NAME

Performance increase of around 1100% compared to ASP

=head1 Abigaël Duesberg E<lt>abi (at) idl-net.comE<gt> exclaimed:

=over

=item * 

Date: Tue, 10 Nov 1998 23:16:31 +0100

=back

  Hi,
  
          I saw that there were requests for success stories, so here is ours.
  We had to create 21 websites that basically had the same textual content
  (but different ads+clickthroughs, different designs, different acces rights,
  etc...), that needed to sometimes remain unseen and act as gateways to other
  sites, and sometimes show up, with changing content and links according to
  user rights. Also, it had to answer search engine bots with different
  content using yet another database of robot user agents, as well as (coupled
  with LWP stuff) try to relate automatic posting to search engine databases
  to bots that came visiting (I know this isn't really good, but then, food is
  sometimes more important, :-( ) and to optimise meta tags, resubmission,
  etc...
  
          It's all done in mod_perl, and in three days time it served a bit
  more than 4 million mod_perl hits, and submitted 180.000 forms to search
  engines. Everything's running on a 300mhz x86, with 128megs of ram. As a
  comparison, the early development tests were done using CGI on the same PC,
  and ASP on a more powerful one running IIS. We also tried using java
  servlets but the results were so desperate that I will not mention them here
  in respect for those people that use them. Given the time it took either for
  the CGI to be finished, or for the ASP to connect to it's SQL Server 6.5 to
  yield the right results or send the right page, we had been planning to buy
  5 other PCs to get the job done with those solutions. Our benchmarks run
  with about 15.000 iterations of a series of calls to the servers that were
  under no other load show that ASP is hardly faster than CGI when database
  access is used (and then you have to take into account the fact that the ASP
  PC was fairly stronger, (I don't remember the CPU but it had 512megs of
  ram), but that mod_perl induces a performance increase of around 1100% !!!
  Also, it seems to be using less ressources (though I haven't tested that
  fully), or using them for so short time lapses that one doesn't even notice.
  
          The mod_perl development of the whole project was done by one person
  in less than three weeks (stress-testing included) , and it is running
  flawlessly.
  
  
  I am looking for something stronger, but all that comes to mind is a deeply
  heart-felt "Thanks !".
  
  
  
  Abigaël Duesberg
  ASP - Lotus - LiveWire - Perl - Java
  
  


=cut

