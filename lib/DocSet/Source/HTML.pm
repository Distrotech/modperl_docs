package DocSet::Source::HTML;

use strict;
use warnings;

use DocSet::Util;

use vars qw(@ISA);
require DocSet::Doc;
@ISA = qw(DocSet::Doc);

sub retrieve_meta_data {
    my($self) = @_;

    $self->parse;

    use Pod::POM::View::HTML;
    my $mode = 'Pod::POM::View::HTML';
    #print Pod::POM::View::HTML->print($pom);

    $self->{meta} = 
        {
         title => $self->{parsed_tree}->{title},
         link  => $self->{rel_dst_path},
        };

    # there is no autogenerated TOC for HTML files
}

sub parse {
    my($self) = @_;
    
    # already parsed
    return if exists $self->{parsed_tree} && $self->{parsed_tree};

    # print ${ $self->{content} };
    #my %segments = map {$_ => ''} qw(title body);

    # this one retrievs the body and the title of the given html
    require HTML::Parser;
    sub start_h {}
    sub end_h {
        my($self, $tagname, $skipped_text) = @_;
        # use $p itself as a tmp storage (ok according to the docs)
        $self->{parsed_tree}->{$tagname} = $skipped_text;
    }
    my $p = HTML::Parser->new(api_version => 3,
                              report_tags => [qw(title body)],
                              start_h => [\&start_h],
                              end_h   => [\&end_h, "self,tagname,skipped_text"],
                             );
    # Parse document text chunk by chunk
    $p->parse(${ $self->{content} });
    $p->eof;

    # store the tree away
    $self->{parsed_tree} = $p->{parsed_tree};
}


1;
__END__

=head1 NAME

C<DocSet::Source::HTML> - A class for parsing input document in the HTML format

=head1 SYNOPSIS

See C<DocSet::Source>

=head1 DESCRIPTION

=head1 METHODS

=over

=item * parse

Converts the source HTML document into a parsed tree.

=item * retrieve_meta_data

Retrieve and set the meta data that describes the input document into
the I<meta> object attribute. The I<title> and I<link> meta attributes
are getting set.

=back

=head1 AUTHORS

Stas Bekman E<lt>stas (at) stason.orgE<gt>


=cut
